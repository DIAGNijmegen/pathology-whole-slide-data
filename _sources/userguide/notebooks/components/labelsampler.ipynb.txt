{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0d89e6a9",
   "metadata": {},
   "source": [
    "# LabelSampler\n",
    "\n",
    "The way the batchiterator samples the enxt labels is done via the label sampler. With the example data in the user guides we have for example the labels 'stroma',  'lymhpocytes', and 'tumor'. There a different built-in label samplers that sample the next label is specific way. In this guide we go over these labelsamplers. All labelsamplers, first **sort** the labels and can be used to **infinite** sample next labels and a **seed** can be set for reproducibilty.\n",
    "\n",
    "in the user_configfor the batchiterator this can be configured with the \"label_sampler\" key.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf26ed5d-3749-4d87-b89b-4eeb679e61e7",
   "metadata": {},
   "source": [
    "## OrderedLabelSampler\n",
    "samples labels in an ordered fashion:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "13c7a066-6db0-4a0e-a54c-3b00fa9f64de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ordered labels ['lymphcytes', 'stroma', 'tumor']\n",
      "Iteration 0\n",
      "\t lymphcytes\n",
      "\t stroma\n",
      "\t tumor\n",
      "\n",
      "Iteration 1\n",
      "\t lymphcytes\n",
      "\t stroma\n",
      "\t tumor\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from wholeslidedata.samplers.labelsampler import OrderedLabelSampler\n",
    "labels = sorted([\"tumor\", \"stroma\", \"lymphcytes\"])\n",
    "\n",
    "label_sampler = OrderedLabelSampler(labels, seed=123)\n",
    "print('Ordered labels', labels)\n",
    "for i in range(2):\n",
    "    print('Iteration', i)\n",
    "    for _ in labels:\n",
    "        print(\"\\t\", next(label_sampler))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa269e77-4254-4095-8379-1860f1762b3b",
   "metadata": {},
   "source": [
    "## RandomLabelSampler\n",
    "samples labels randomly (with replacement):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "8cd66be3-0038-4508-8f44-8cbf0cd4ba36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ordered labels ['lymphcytes', 'stroma', 'tumor']\n",
      "Counts lymphcytes : 3338\n",
      "Counts stroma : 3274\n",
      "Counts tumor : 3388\n"
     ]
    }
   ],
   "source": [
    "from wholeslidedata.samplers.labelsampler import RandomLabelSampler\n",
    "labels = sorted([\"tumor\", \"stroma\", \"lymphcytes\"])\n",
    "\n",
    "label_sampler = RandomLabelSampler(labels, seed=123)\n",
    "print('Ordered labels', labels)\n",
    "sampled_labels = [next(label_sampler) for _ in range(10000)]\n",
    "for label in labels:\n",
    "    print(\"Sample counts\", label, \":\", sampled_labels.count(label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79b1f66a-f050-4806-86e0-37ba8bc35678",
   "metadata": {},
   "source": [
    "## BalancedLabelSampler\n",
    "\n",
    "samples randomly (without replacement, i.e.,makes sure that all labels have been sampled before a label is sampled again)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "edc9eb51-83b8-4128-b9d0-36f786865be8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ordered labels ['lymphocytes', 'stroma', 'tumor']\n",
      "Iteration 0\n",
      "\t lymphocytes\n",
      "\t stroma\n",
      "\t tumor\n",
      "\n",
      "Iteration 1\n",
      "\t stroma\n",
      "\t lymphocytes\n",
      "\t tumor\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from wholeslidedata.samplers.labelsampler import BalancedLabelSampler\n",
    "labels = sorted([\"tumor\", \"stroma\", \"lymphocytes\"])\n",
    "\n",
    "label_sampler = BalancedLabelSampler(labels, seed=123)\n",
    "print('Ordered labels', labels)\n",
    "for i in range(2):\n",
    "    print('Iteration', i)\n",
    "    for _ in labels:\n",
    "        print(\"\\t\", next(label_sampler))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99f561bf-665c-436f-ba32-a95ab861ef50",
   "metadata": {
    "tags": []
   },
   "source": [
    "## WeightedLabelSampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ddba142c-72c9-433e-ba90-68c9957a8045",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample counts percentage lymphocytes : 0.611\n",
      "Sample counts percentage stroma : 0.191\n",
      "Sample counts percentage tumor : 0.198\n"
     ]
    }
   ],
   "source": [
    "from wholeslidedata.samplers.labelsampler import WeightedLabelSampler\n",
    "import random\n",
    "\n",
    "labels = {'lymphocytes': 0.6, 'stroma':0.2, 'tumor':0.2} \n",
    "sample_counts = 1000\n",
    "label_sampler = WeightedLabelSampler(labels=labels)\n",
    "sampled_labels = [next(label_sampler) for _ in range(sample_counts)]\n",
    "for label in labels:\n",
    "    print(\"Sample counts percentage\", label, \":\", sampled_labels.count(label)/sample_counts)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14624e06-f5bb-4f73-8330-81d69198179c",
   "metadata": {},
   "source": [
    "## AnnotationCountedLabelSampler\n",
    "Labels with more annotations are sampled more often  based on the number of avaialble annotations per label. The annotations_per_label is an available property in the wholeslidedataset. With the Shuffle (default=True) argument you can set if the labels should be shuffeled or retreived in an orderly fashion (first all labels for for one label, then the second label etc..)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b2d9e3a3-8be9-429c-a194-bbdfa154973c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ordered labels ['lymphcytes', 'stroma', 'tumor']\n",
      "Annotations per label {'lymphcytes': 2, 'stroma': 9, 'tumor': 3}\n",
      "\n",
      "Shuffle=True\n",
      "['stroma', 'stroma', 'stroma', 'lymphcytes', 'stroma', 'stroma', 'stroma', 'tumor', 'stroma', 'lymphcytes', 'stroma', 'tumor', 'stroma', 'tumor']\n",
      "Sample counts lymphcytes : 2\n",
      "Sample counts stroma : 9\n",
      "Sample counts tumor : 3\n",
      "\n",
      "Shuffle=False\n",
      "['lymphcytes', 'lymphcytes', 'stroma', 'stroma', 'stroma', 'stroma', 'stroma', 'stroma', 'stroma', 'stroma', 'stroma', 'tumor', 'tumor', 'tumor']\n",
      "Sample counts lymphcytes : 2\n",
      "Sample counts stroma : 9\n",
      "Sample counts tumor : 3\n"
     ]
    }
   ],
   "source": [
    "from wholeslidedata.samplers.labelsampler import AnnotationCountedLabelSampler\n",
    "import random\n",
    "\n",
    "\n",
    "labels = sorted([\"tumor\", \"stroma\", \"lymphcytes\"])\n",
    "print('Ordered labels', labels)\n",
    "annotations_per_label = {label: random.randint(1, 10) for label in labels}\n",
    "print('Annotations per label', annotations_per_label)\n",
    "print(\"\\nShuffle=True\")\n",
    "label_sampler = AnnotationCountedLabelSampler(labels=labels, annotations_per_label=annotations_per_label)\n",
    "sampled_labels = [next(label_sampler) for _ in range(sum(annotations_per_label.values()))]\n",
    "print(sampled_labels)\n",
    "for label in labels:\n",
    "    print(\"Sample counts\", label, \":\", sampled_labels.count(label))\n",
    "    \n",
    "\n",
    "print(\"\\nShuffle=False\")\n",
    "label_sampler = AnnotationCountedLabelSampler(labels=labels, annotations_per_label=annotations_per_label, shuffle=False)\n",
    "sampled_labels = [next(label_sampler) for _ in range(sum(annotations_per_label.values()))]\n",
    "print(sampled_labels)\n",
    "for label in labels:\n",
    "    print(\"Sample counts\", label, \":\", sampled_labels.count(label))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86fae8f6-904c-49e9-b208-ac4a7b9ff983",
   "metadata": {},
   "source": [
    "## PixelCountedLabelSampler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "88feb19b-e17c-4dfd-ae05-337e59f4c5ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "from wholeslidedata.samplers.utils import one_hot_encoding\n",
    "from wholeslidedata.samplers.labelsampler import PixelCountedLabelSampler\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "# Here we define the label_map. The label map is a dictionary in which labels/classes are mapped to an integer. \n",
    "# The integer should represent the ground truth\n",
    "\n",
    "label_map = {'lymphocytes': 1, 'stroma': 2, 'tumor': 3}\n",
    "\n",
    "\n",
    "# below we make some example ground truth batches with a single label (one-hot-encoded) with (batchsize, width, height) dimensions\n",
    "\n",
    "# an example batch with only lymphocytes\n",
    "lymphocytes_ybatch = one_hot_encoding(np.ones((1, 128,128), dtype='uint8'), label_map)\n",
    "\n",
    "# an example batch with only stroma\n",
    "stroma_ybatch = one_hot_encoding(np.ones((1, 128,128),  dtype='uint8') * 2, label_map)\n",
    "\n",
    "# an example batch with only tumor\n",
    "tumor_ybatch = one_hot_encoding(np.ones((1, 128,128),  dtype='uint8') * 3, label_map)\n",
    "\n",
    "# test if expected output\n",
    "assert np.all(lymphocytes_ybatch[..., 0] == 1)\n",
    "assert np.all(stroma_ybatch[..., 1] == 1)\n",
    "assert np.all(tumor_ybatch[..., 2] == 1)\n",
    "\n",
    "example_ground_truth = {'lymphocytes': lymphocytes_ybatch, 'stroma': stroma_ybatch, 'tumor': tumor_ybatch}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0c543169-0814-4942-a9df-93a56a1081b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1,3, figsize=(15,5))\n",
    "\n",
    "# Lets create the pixel label controller!\n",
    "pixel_label_sampler = PixelCountedLabelSampler(labels = list(label_map.keys()))\n",
    "\n",
    "# list for keeping track of sampled labels\n",
    "sampled_labels = []\n",
    "\n",
    "# if no pixel were sampled each label should be sampled with the same probabilty\n",
    "\n",
    "# sample new labels\n",
    "for i in range(3000):\n",
    "    #sample next label\n",
    "    label = next(pixel_label_sampler)\n",
    "    \n",
    "    # keep track of sampled labels\n",
    "    sampled_labels.append(label)\n",
    "    \n",
    "    # update the pixel label controller with ground truth values of the sampled label\n",
    "    pixel_label_sampler.update((None, example_ground_truth[label]))\n",
    "    \n",
    "\n",
    "pd.Series(sampled_labels).value_counts().reindex([\"lymphocytes\", \"stroma\", \"tumor\"]).plot(kind='bar', ax=axes[0])\n",
    "axes[0].set_title('#samples (equal sampling)')\n",
    "\n",
    "\n",
    "\n",
    "# EXTRA Lymphocyte SAMPLING: sample a lot of lymphocytes samples and update pixel counter with lymphocyte ground truth\n",
    "for i in range(500):\n",
    "    sampled_labels.append('lymphocytes')\n",
    "    pixel_label_sampler.update((None, lymphocytes_ybatch))\n",
    "\n",
    "pd.Series(sampled_labels).value_counts().reindex([\"lymphocytes\", \"stroma\", \"tumor\"]).plot(kind='bar', ax=axes[1])\n",
    "axes[1].set_title('#samples (after extra lymphocyte sampling)')\n",
    "\n",
    "\n",
    "\n",
    "# REBALANCING: lymphocytes should be now be sampled less often. \n",
    "for i in range(6000):\n",
    "    \n",
    "    #sample next label\n",
    "    label = next(pixel_label_sampler)\n",
    "    \n",
    "    # keep track of sampled labels\n",
    "    sampled_labels.append(label)\n",
    "    \n",
    "    # update the pixel label controller with ground truth values of the sampled label\n",
    "    pixel_label_sampler.update((None, example_ground_truth[label]))\n",
    "    \n",
    "pd.Series(sampled_labels).value_counts().reindex([\"lymphocytes\", \"stroma\", \"tumor\"]).plot(kind='bar',  ax=axes[2])\n",
    "axes[2].set_title('#samples (after rebalancing)')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
